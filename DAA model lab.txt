1.binary search

// You are using GCC
#include<iostream>
using namespace std;
int bser(int arr[],int n,int x)
{
    int low=0,high=n-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid]==x)
        return mid;
        if(arr[mid]>x)
            high=mid-1;
        else
            low=mid+1;
    }
    return -1;
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int x;
    cin>>x;
    int res=bser(a,n,x);
    if(res==-1)
    {
        cout<<"NO OCCURRENCES";
    }
    else
    {
        cout<<res;
    }
}




2.Linear search


// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n,t=0;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int x;
    cin>>x;
    for(int i=0;i<n;i++)
    {
        if(a[i]==x)
        {
            cout<<"Yes";
            break;
        }
        else
        {
            t++;
        }
    }
    if(t==n)
    cout<<"No";
}



3.Bubble sort

#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<n-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                int t=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=t;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}



4.Insertion sort

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(int i=1;i<n;i++)
    {
        int temp=arr[i];
        int j=i-1;
        while(j>=0 && arr[j]>temp)
        {
            arr[j+1]=arr[j];
            j--;
        }
        arr[j+1]=temp;
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}


5.Selection sort

// You are using GCC
#include<bits/stdc++.h>
using namespace std;
void selso(vector<int>&d,vector<int>&m,vector<int>&y,int a,int b)
{
    if(a==b)
    return;
    int c=a;
    for(int i=a+1;i<b;i++)
    {
        if(y[c]>y[i])
        c=i;
        else if(y[c]==y[i])
        {
            if(m[c]>m[i])
            c=i;
            else if(m[c]==m[i])
            if(d[c]>d[i])
            c=i;
        }
    }
    if(c!=a)
    {
        swap(y[a],y[c]);
        swap(m[a],m[c]);
        swap(d[a],d[c]);
    }
    selso(d,m,y,a+1,b);
}
int main()
{
    int a,b;
    cin>>a;
    vector<int>d,m,y;
    for(int i=0;i<a;i++)
    {
        cin>>b;
        d.push_back(b);
        cin>>b;
        m.push_back(b);
        cin>>b;
        y.push_back(b);
    }
    selso(d,m,y,0,a);
    for(int i=0;i<a;i++)
    cout<<d[i]<<" "<<m[i]<<" "<<y[i]<<endl;
}


6.Heap sort

// You are using GCC
#include<iostream>
using namespace std;
void maxheap(int arr[],int n,int i)
{
    int large=i;
    int left=(i*2)+1;
    int right=(i*2)+2;
    while(left<n && arr[left]>arr[large])
        large=left;
    while(right<n && arr[right]>arr[large])
        large=right;
    if(large!=i)
    {
        swap(arr[i],arr[large]);
        maxheap(arr,n,large);
    }
}
void binary(int arr[],int n)
{
    for(int i=(n/2)-1;i>=0;i--)
    {
        maxheap(arr,n,i);
    }
    for(int i=n-1;i>=0;i--)
    {
        swap(arr[0],arr[i]);
        maxheap(arr,i,0);
    }
}
int  main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cout<<endl;
    binary(arr,n);
    for(int e : arr)
    cout<<e<<" ";
}


7.Quick sort

// You are using GCC
#include<iostream>
using namespace std;
int partition(int arr[],int low,int high)
{
    int pivot=arr[high];
    int i=(low-1);
    for(int j=low;j<=high-1;j++)
    {
        if(arr[j]<pivot)
        {
            i++;
            swap(arr[i],arr[j]);
        }
    }
    swap(arr[i+1],arr[high]);
    return(i+1);
}
void quicksort(int arr[],int low,int high)
{
    if(low<high)
    {
        int pi=partition(arr,low,high);
        quicksort(arr,low,pi-1);
        quicksort(arr,pi+1,high);
    }
}
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    quicksort(arr,0,n-1);
    
    for(int e : arr)
    cout<<e<<" ";
}


8.Merge Sort

// You are using GCC
#include <iostream>
using namespace std;
int merge(int arr[],int low,int mid,int high)
{
    int n1 = mid-low+1;
    int n2 = high - mid;
    
    int a[n1],b[n2];
    
    for(int i=0;i<n1;i++)
    {
        a[i] = arr[low+i];
    }
    
    for(int j=0;j<n2;j++)
    {
        b[j] = arr[mid+1+j];
    }
    
    int p=0,q=0,r=low;
    
    while(p<n1 && q<n2)
    {
        if(a[p]<=b[q])
        {
            arr[r]=a[p];
            p++;
        }
        else
        {
            arr[r]=b[q];
            q++;
        }
        r++;
    }
    
    while(p<n1)
    {
        arr[r]=a[p];
        p++;
        r++;
    }
    while(q<n2)
    {
        arr[r]=b[q];
        q++;
        r++;
    }
}
void mergesort(int arr[],int low,int high)
{
    if(low<high)
    {
        int mid = low+(high-low)/2;
        
        mergesort(arr,low,mid);
        mergesort(arr,mid+1,high);
        
        merge(arr,low,mid,high);
    }
}
int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    mergesort(arr,0,n-1);
    
    for(int e:arr)
    {
        cout<<e<<" ";
    }
    
}
 

9.Activity Selection

// You are using GCC
#include <iostream>
using namespace std;
struct Match
{
    char name[50];
    int s;
    int e;
};
int main()
{
    int n;
    cin>>n;
    
    Match arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i].name>>arr[i].s>>arr[i].e;
    }
    
    for(int i=1;i<n-1;i++)
    {
        for(int j=0;j<n-i;j++)
        {
            if(arr[j].e>arr[j+1].e)
            {
                Match temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
    
    cout<<"Selected Activities are:"<<endl;
    cout<<arr[0].name<<" ";
    
    int k=0;
    for(int i=1;i<n;i++)
    {
        if(arr[i].s >= arr[k].e)
        {
            cout<<arr[i].name<<" ";
            k=i;
        }
    }
}


10.Knapsack problem

// You are using GCC
#include<bits/stdc++.h>
using namespace std;
void knapsack(int n, float w[],float p[],float W)
{
    float x[n],tp=0;
    int i,u;
    u=W;
    for(i=0;i<n;i++)
    {
        if(w[i]>u)
            break;
        else
        {
            x[i]=1.0;
            tp=tp+p[i];
            u=u-w[i];
        }
    }
    if(i<n)
    {
        x[i]=u/w[i];
    }
    tp=tp+(x[i]*p[i]);
    cout<<"Maximum profit is:- "<<fixed<<setprecision(2)<<tp;
}
int main()
{
    int n,i,j;
    cin>>n;
    float w[n],p[n],r[n];
    for(int i=0;i<n;i++)
    {
        cin>>w[i]>>p[i];
    }
    float W,temp;
    cin>>W;
    for(i=0;i<n;i++)
    {
        r[i]=p[i]/w[i];
    }
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(r[i]<r[j])
            {
                temp=r[j];
                r[j]=r[i];
                r[i]=temp;
                
                temp=w[j];
                w[j]=w[i];
                w[i]=temp;
                
                temp=p[j];
                p[j]=p[i];
                p[i]=temp;
                
            }
        }
    }
    knapsack(n,w,p,W);
}




11.Naive Algorithm

#include <bits/stdc++.h>
using namespace std;

void search(string pat, string txt)
{
	int M = pat.length();
	int N = txt.length();
	int t=0;
	for (int i = 0; i <= N - M; i++) {
		int j;
		for (j = 0; j < M; j++)
			if (txt[i + j] != pat[j])
				break;

		if (j== M){
			cout << "Found at " << i << endl;
			t=1;
		}
	}
	if(t==0)
	    cout<<"Not Found";
}
int main()
{
    string pat,txt;
    cin>>txt>>pat;
	search(pat, txt);
	return 0;
}




12.KMP Algorithm

// You are using GCC
#include <iostream>
#include <vector>
#include <string>
using namespace std;
void computeLPSArray(const string& pat, int M, vector<int>& lps) {
    int len = 0;
    int i = 1;
    lps[0] = 0;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = len;
                i++;
            }
        }
    }
}
void KMPSearch(const string& pat, const string& txt) {
    int M = pat.length();
    int N = txt.length();
    vector<int> lps(M);
    int j = 0;
    computeLPSArray(pat, M, lps);
    bool found = false;
    int i = 0;
    while (N - i >= M - j) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
        if (j == M) {
            found = true;
            cout << "Found at " << (i - j) << std::endl;
            j = lps[j - 1];
        } else if (i < N && pat[j] != txt[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
    if (!found)
        cout << "Not Found" << std::endl;
}
int main() {
    string txt, pat;
    cin >> txt >> pat;
    KMPSearch(pat, txt);
    return 0;
}


13.subset sum problem


#include <iostream>
#include <vector>

using namespace std;

int cnt = 0;

void subset(vector<int>& a, int sum, int index, int target) {
    if (target == sum) {
        cnt++;
        if (index < a.size())
            subset(a, sum - a[index - 1], index, target);
    } else {
        for (int i = index; i < a.size(); i++) {
            subset(a, sum + a[i], i + 1, target);
        }
    }
}

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    int k;
    cin >> k;
    subset(a, 0, 0, k);
    cout << cnt;
    return 0;
}


14.Rat in a maze


#include <iostream>
using namespace std;
const int MAX = 10;
int N;
void printSolution(int sol[MAX][MAX]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << sol[i][j] << " ";
        }
        cout << endl;
    }
}
bool isSafe(int maze[MAX][MAX], int x, int y) {
    return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1);
}
bool solveMazeUtil(int maze[MAX][MAX], int x, int y, int sol[MAX][MAX]) {
    if (x == N - 1 && y == N - 1 && maze[x][y] == 1) {
        sol[x][y] = 1;
        return true;
    }
    if (isSafe(maze, x, y)) {
        if (sol[x][y] == 1)
            return false; 
        sol[x][y] = 1;       
        if (solveMazeUtil(maze, x + 1, y, sol) ||
            solveMazeUtil(maze, x, y + 1, sol) ) {
            return true;
        }
        sol[x][y] = 0;
        return false;
    }
    return false;
}
bool solveMaze(int maze[MAX][MAX]) {
    int sol[MAX][MAX] = {0};
    if (!solveMazeUtil(maze, 0, 0, sol)) {
        cout << "Solution doesn't exist" << endl;
        return false;
    }
    printSolution(sol);
    return true;
}
int main() {
    int i, j;
    cin >> N;
    int maze[MAX][MAX];
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            cin >> maze[i][j];
        }
    }
    solveMaze(maze);
    return 0;
}


15.LCS


// You are using GCC
#include<iostream>
#include<string>
using namespace std;
int lcs(string X,string Y,int m,int n){
    int L[m+1][n+1];
    for(int i=0;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(i==0 || j==0)
            {
                L[i][j]=0;
            }
            else if(X[i-1]==Y[j-1])
            {
                L[i][j]=L[i-1][j-1]+1;
            }
            else
            {
                L[i][j]=max(L[i-1][j],L[i][j-1]);
            }
        }
        
    }
    return L[m][n];
}
int max(int a,int b){
    return (a>b) ? a:b;
    
}
int main(){
    string a,b;
    cin>>a>>b;
    int m=a.length();
    int n=b.length();
    cout<<lcs(a,b,m,n);
}


16.Levenstien distance


// You are using GCC

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int minDistance(string word1, string word2) {
    int m = word1.length();
    int n = word2.length();

   
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

  
    for (int i = 0; i <= m; i++) {
        dp[i][0] = i;
    }

    for (int j = 0; j <= n; j++) {
        dp[0][j] = j;
    }

    
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (word1[i - 1] == word2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]);
            }
        }
    }

    return dp[m][n];
}

int main() {
    string string1, string2;
    cin >> string1 >> string2;

    int distance = minDistance(string1, string2);
    cout << distance << endl;

    return 0;
}



17.Range minimum query



// You are using GCC
#include<iostream>
#include<vector>
#include<climits>
using namespace std;
void buildTree(vector<int> &arr,vector<int>&tree,int start,int end,int node)
{
    if(start==end){
        tree[node]=arr[start];
        return;
    }
    
    int mid=(start+end)/2;
    buildTree(arr,tree,start,mid,2*node+1);
    buildTree(arr,tree,mid+1,end,2*node+2);
    
    tree[node]=min(tree[2*node+1],tree[2*node+2]);
}
int query(vector<int> &tree,int start,int end,int node,int L,int R){
    if(L>end || R<start)
        return INT_MAX;
    
    if(L<=start && R>=end)
        return tree[node];
        
    int mid=(start+end)/2;
    int leftMin=query(tree,start,mid,2*node+1,L,R);
    int rightMin=query(tree,mid+1,end,2*node+2,L,R);
    
    return min(leftMin,rightMin);
}
int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
        cin>>arr[i];
    vector<int>tree(4*n);
    buildTree(arr,tree,0,n-1,0);
    
    int L,R;
    cin>>L>>R;
    
    int minVal=query(tree,0,n-1,0,L,R);
    cout<<"Minimum of values in range ["<<L<<", "<<R<<"] is = "<<minVal;
    return 0;
}


18.Sparse table



// You are using GCC
#include<iostream>
#include<vector>
#include<climits>
using namespace std;
void buildTree(vector<int> &arr,vector<int>&tree,int start,int end,int node)
{
    if(start==end){
        tree[node]=arr[start];
        return;
    }
    
    int mid=(start+end)/2;
    buildTree(arr,tree,start,mid,2*node+1);
    buildTree(arr,tree,mid+1,end,2*node+2);
    
    tree[node]=min(tree[2*node+1],tree[2*node+2]);
}
int query(vector<int> &tree,int start,int end,int node,int L,int R){
    if(L>end || R<start)
        return INT_MAX;
    
    if(L<=start && R>=end)
        return tree[node];
        
    int mid=(start+end)/2;
    int leftMin=query(tree,start,mid,2*node+1,L,R);
    int rightMin=query(tree,mid+1,end,2*node+2,L,R);
    
    return min(leftMin,rightMin);
}
int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
        cin>>arr[i];
    vector<int>tree(4*n);
    buildTree(arr,tree,0,n-1,0);
    
    int L,R;
    cin>>L>>R;
    
    int minVal=query(tree,0,n-1,0,L,R);
    cout<<"Minimum of values in range ["<<L<<", "<<R<<"] is = "<<minVal;
    return 0;
}



19.Floyd Warshall algorithm


#include <bits/stdc++.h>
using namespace std;
int INF = 99999;
int V;

void FW(int **graph)
{
    int dist[V][V],i,j,k;
    
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        {
            dist[i][j]=graph[i][j];
        }
    }
    
    for(k=0;k<V;k++)
    {
        for(i=0;i<V;i++)
        {
            for(j=0;j<V;j++)
            {
                if(dist[i][j]>dist[i][k]+dist[k][j])
                {
                    dist[i][j]=dist[i][k]+dist[k][j];
                }
            }
        }
    }
    
    cout<<"Shortest path matrix"<<endl;
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        {
            if(dist[i][j]==INF)
            cout<<"INF ";
            else
            cout<<dist[i][j]<<" ";
        }
        cout<<endl;
    }
}
int main()
{
    int E,source,dest,value;
    cin>>V>>E;
    int * * graph = new int * [V]; 
    
    for(int i=0;i<V;i++)
    {
        graph[i]=new int[V];
    }
    
    for(int i=0;i<V;i++)
    {
        for(int j=0;j<V;j++)
        {
            if(i==j)
            {
                graph[i][j]=0;
            }
            else
            {
                graph[i][j]= INF;
            }
        }
    }
    for(int i=0;i<E;i++)
    {
        cin>>source;
        cin>>dest;
        cin>>value;
        graph[source][dest]=value;
        graph[dest][source]=value;
    }
    
    cout<<"Original matrix"<<endl;
    for(int i=0;i<V;i++)
    {
        for(int j=0;j<V;j++)
        {
            if(graph[i][j]==INF)
            {
                cout<<"INF ";
            }
            else
            {
                cout<<graph[i][j]<<" ";
            }
        }
        cout<<endl;
    }
    cout<<endl;
    
    FW(graph);
}


20.Prim's algorithm


#include <iostream>
#include <vector>
#include <climits>

using namespace std;

const int V_MAX = 100; // Maximum number of vertices

int minKey(int key[], bool mstSet[], int V) {
    int min = INT_MAX, min_index;
    
    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    
    return min_index;
}

void printMST(vector<vector<int>>& graph, int parent[], int V) {
    for (int i = 1; i < V; i++) {
        cout << parent[i] << " " << i << " " << graph[i][parent[i]] << "\n";
    }
}

void primMST(vector<vector<int>>& graph, int V) {
    int parent[V]; // Array to store constructed MST
    int key[V];    // Key values used to pick minimum weight edge
    
    bool mstSet[V]; // To represent set of vertices not yet included in MST
    
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }
    
    key[0] = 0;     // First vertex is always the root of MST
    parent[0] = -1; // No parent for the first vertex
    
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        
        mstSet[u] = true;
        
        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    
    // Print the MST
    printMST(graph, parent, V);
}

int main() {
    int V;
    cin >> V;
    
    vector<vector<int>> graph(V, vector<int>(V));
    
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }
    
    primMST(graph, V);
    
    return 0;
}


21.Dijistra Algorithm


#include <iostream>
#include <vector>
#include <climits>

using namespace std;

// Number of vertices in the graph
#define V 5

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], bool visited[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the calculated distances from the source vertex
void printDijkstra(int dist[]) {
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d \t\t %d\n", i, dist[i]);
    }
}

// Function to implement Dijkstra's algorithm to find the shortest paths
void dijkstra(int graph[V][V], int src) {
    int dist[V];        // Array to store the shortest distances
    bool visited[V];    // Array to track visited vertices

    // Initialize all distances as INFINITE and visited as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
    }

    // Distance from the source vertex to itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);

        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the calculated distances
    printDijkstra(dist);
}

int main() {
    int graph[V][V];
    for(int i=0;i<V;i++)
        for(int j=0;j<V;j++)
            cin>>graph[i][j];
    int source;
    cin>>source;// Change the source vertex as needed

    dijkstra(graph, source);

    return 0;
}


22.Kurskals Algorithm


#include <bits/stdc++.h> 
using namespace std; 

// DSU data structure 
// path compression + rank by union 
class DSU { 
	int* parent; 
	int* rank; 

public: 
	DSU(int n) 
	{ 
		parent = new int[n]; 
		rank = new int[n]; 

		for (int i = 0; i < n; i++) { 
			parent[i] = -1; 
			rank[i] = 1; 
		} 
	} 

	// Find function 
	int find(int i) 
	{ 
		if (parent[i] == -1) 
			return i; 

		return parent[i] = find(parent[i]); 
	} 

	// Union function 
	void unite(int x, int y) 
	{ 
		int s1 = find(x); 
		int s2 = find(y); 

		if (s1 != s2) { 
			if (rank[s1] < rank[s2]) { 
				parent[s1] = s2; 
			} 
			else if (rank[s1] > rank[s2]) { 
				parent[s2] = s1; 
			} 
			else { 
				parent[s2] = s1; 
				rank[s1] += 1; 
			} 
		} 
	} 
}; 

class Graph { 
	vector<vector<int> > edgelist; 
	int V; 

public: 
	Graph(int V) { this->V = V; } 

	// Function to add edge in a graph 
	void addEdge(int x, int y, int w) 
	{ 
		edgelist.push_back({ w, x, y }); 
	} 

	void kruskals_mst() 
	{ 
		// Sort all edges 
		sort(edgelist.begin(), edgelist.end()); 

		// Initialize the DSU 
		DSU s(V); 
		int ans = 0; 
		cout << "Following are the edges in the "
				"constructed MST"
			<< endl; 
		for (auto edge : edgelist) { 
			int w = edge[0]; 
			int x = edge[1]; 
			int y = edge[2]; 

			// Take this edge in MST if it does 
			// not forms a cycle 
			if (s.find(x) != s.find(y)) { 
				s.unite(x, y); 
				ans += w; 
				cout << x << " -- " << y << " == " << w 
					<< endl; 
			} 
		} 
		cout << "Minimum Cost Spanning Tree: " << ans; 
	} 
}; 

// Driver code 
int main() 
{ 
    int V,E;
    cin>>V>>E;
	Graph g(V); 
	for(int x=1;x<=E;x++)
	{
	    int i,j,w;
	    cin>>i>>j>>w;
	    g.addEdge(i, j, w); 
	}
	// Function call 
	g.kruskals_mst(); 

	return 0; 
} 